{%    from 'macros.md.j2' import apply_alphabetical_ordering_by_brk_descriptions
%}{%  from 'macros.md.j2' import apply_alphabetical_ordering_by_descriptions
%}{%  from 'macros.md.j2' import apply_alphabetical_ordering_by_release_notices
%}{%  from 'macros.md.j2' import format_breaking_changes_description, format_commit_summary_line
%}{%  from 'macros.md.j2' import format_release_notice
%}{#
EXAMPLE:

### Features

- Add new feature ([#10](https://domain.com/namespace/repo/pull/10),
  [`abcdef0`](https://domain.com/namespace/repo/commit/HASH))

- **scope**: Add new feature ([`abcdef0`](https://domain.com/namespace/repo/commit/HASH))

### Bug Fixes

- Fix bug ([#11](https://domain.com/namespace/repo/pull/11),
  [`abcdef1`](https://domain.com/namespace/repo/commit/HASH))

### Breaking Changes

- With the change _____, the change causes ___ effect. Ultimately, this section
  it is a more detailed description of the breaking change. With an optional
  scope prefix like the commit messages above.

- **scope**: this breaking change has a scope to identify the part of the code that
  this breaking change applies to for better context.

### Additional Release Information

- This is a release note that provides additional information about the release
  that is not a breaking change or a feature/bug fix.

- **scope**: this release note has a scope to identify the part of the code that
  this release note applies to for better context.
#}
{% set categories = {
    "breaking": "Breaking Changes",
    "features": "Features",
    "bug fixes": "Fixes",
    "performance improvements": "Performance Improvements",
    "documentation": "Documentation",
    "chores": "Chores / Maintenance",
    "continuous integration": "Continuous Integration / Continuous Delivery",
    "refactoring": "Refactor",
    "code style": "Formatting",
    "build system": "Build System",
    "unknown": "Other"
} %}
{%  set max_line_width = max_line_width | default(100)
%}{%  set hanging_indent = hanging_indent | default(2)
%}{# UNRELEASED #}
{% if context.history.unreleased | length < 0 %}

## Unreleased
{% for type_, commits in context.history.unreleased | dictsort %}
{% for commit in commits %}{% if type_ != "unknown" %}
* {{ commit.message.rstrip() }} ([`{{ commit.short_hash }}`]({{ commit.hexsha | commit_hash_url }}))
{% else %}
* {{ commit.message.rstrip() }} ([`{{ commit.short_hash }}`]({{ commit.hexsha | commit_hash_url }}))
{% endif %}{% endfor %}{% endfor %}{% endif %}


{# RELEASED #}
{% if context.history.released | length > 0 
%}{% for version, release in context.history.released.items() 
%}{#
#}
## {{ version.as_semver_tag() }} ({{ release.tagged_date.strftime("%Y-%m-%d") }})
{% for type_ in ["breaking", "features", "bug fixes", "performance improvements", "documentation", "chores", "continuous integration", "refactoring", "code style", "build system", "unknown"] 
%}{#
#}{% set features_commits = release["elements"][type_ ]
%}{#    PREPROCESS COMMITS (order by description & format description line)
#}{%    set ns = namespace(commits=features_commits)
%}{#
#}{%    set commit_descriptions = []
%}{#
#}{%    for commit in ns.commits
%}{#      # Create a bulletted list. Add reference links to the commit summary line
#}{%      set description = "- %s" | format(format_commit_summary_line(commit))
%}{%      set description = description | autofit_text_width(max_line_width, hanging_indent)
%}{%      set _ = commit_descriptions.append(description)
%}{%    endfor
%}{#
   #    # PRINT SECTION (header & commits)
#}{%    if commit_descriptions | length > 0
%}{{      "\n"
}}{{      "### %s\n" | format(type_ | title)
}}{{      "\n"
}}{{      "%s\n" | format(commit_descriptions | unique | join("\n\n"))
}} {#
#}{%    endif%}{% endfor %}{% endfor %}{% endif %}

{# Debugging 
{{context.history.released.items()}}
#}
